# -*- coding: utf-8 -*-

from Liquirizia.EventRunner import EventRunnerProperties
from Liquirizia.EventRunner.Types import EventWorker
from Liquirizia.EventRunner.Errors import InvalidBodyError

from Liquirizia.Validator import Validator, Pattern
from Liquirizia.Validator.Patterns import *

from SampleEventRunnerAdd import SampleEventRunnerAdd
from SampleEventRunnerComplete import SampleEventRunnerComplete
from SampleEventRunnerError import SampleEventRunnerError


class IsGreaterThan(Pattern):
	def __init__(self, error=None):
		self.error = error
		return

	def __call__(self, parameter):
		if not parameter['a'] < parameter['b']:
			if self.error:
				raise self.error
			raise RuntimeError('a must be greater than b')
		return parameter


properties = EventRunnerProperties(
	SampleEventRunnerAdd,
	type=EventWorker('event.sample.compute.add', 'Sample', 'queue.sample.compute.add'),
	body=Validator(
		IsDictionary(
			IsMappingOf({
				'a': Validator(IsInteger(error=InvalidBodyError('a 는 정수 이어야 합니다.'))),
				'b': Validator(IsInteger(error=InvalidBodyError('b 는 정수 이어야 합니다.'))),
				}, 
				error=InvalidBodyError('올바르지 않은 형식 입니다.')
			),
			IsGreaterThan(error=InvalidBodyError('b 는 a 보다 커야 합니다.'))
		)
	),
	completes=(
		SampleEventRunnerComplete('event.sample.compute.add.complete.1'),
		SampleEventRunnerComplete('event.sample.compute.add.complete.2'),
	),
	errors=SampleEventRunnerError('event.sample.compute.add.error')
)
